#!/usr/bin/env bash

##
##  Copyright (c) 2023 pobrelkey
##
##  Permission is hereby granted, free of charge, to any person obtaining
##  a copy of this software and associated documentation files (the
##  "Software"), to deal in the Software without restriction, including
##  without limitation the rights to use, copy, modify, merge, publish,
##  distribute, sublicense, and/or sell copies of the Software, and to
##  permit persons to whom the Software is furnished to do so, subject to
##  the following conditions:
##
##  The above copyright notice and this permission notice shall be
##  included in all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
##  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
##  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
##  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
##  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
##  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##



function usage() {
    cat <<"__USAGE__"
Usage: $0 REMOTE_NAME RCLONE_REMOTE_NAME:PATH
   or: $0 --init RCLONE_REMOTE_NAME:PATH
   or: $0 [--fsck|--gc|--repack] [--remote GIT_REMOTE_NAME]
   or: $0 --password-helper [RCLONE_CONFIG_PATH]
   or: $0 [--help|--longhelp|--version]
__USAGE__
}


function options() {
    cat <<'__OPTIONS__'
  --init RCLONE_REMOTE_NAME:PATH [DESCRIPTION]
        create a nearly-empty bare git repository at RCLONE_REMOTE_NAME:PATH
        with a placeholder README.md file, optionally containing DESCRIPTION
  --fsck
        run git-fsck(1) on the remote repository - subsequent arguments
        (except --remote) are passed to `git fsck`
  --gc
        run git-gc(1) on the remote repository - subsequent arguments
        (except --remote) are passed to `git gc`
  --repack
        run git-repack(1) on the remote repository - subsequent arguments
        (except --remote) are passed to `git repack`
  --remote GIT_REMOTE_NAME
        which remote of the current git working directory fsck/gc/repack
        should affect, if more than one uses rclone-sync
  --password-helper [RCLONE_CONFIG_PATH]
        called internally by rclone to obtain the rclone config password
        from the gitcredentials(7) infrastructure
  --help
        print brief usage info
  --longhelp
        print full usage info
  --version
        print version info
__OPTIONS__
}


function longhelp() {
    usage
    echo
    sed -e "s:SCHEME_NAME:${SCHEME_NAME}:g" <<'__LONGHELP_1__'
Pull and push to Git remote repositories via rclone.

In most cases a user shouldn't need to invoke this tool directly -
it is called internally by git whenever accessing a remote repository
whose URL starts with `SCHEME_NAME::` (see gitremote-helpers(7) for
the gory details).

For convenience some options have been added, mostly to aid in
setting up and maintaining remote repositories.
__LONGHELP_1__
    echo
    options
    echo
    sed -e "s:SCHEME_NAME:${SCHEME_NAME}:g" <<'__LONGHELP_2__'
Cloning a repository via rclone is straightforward:

    git clone SCHEME_NAME::name-of-rclone-remote:path/to/repository.git

Alternately you can add an rclone-based remote to an existing working copy:

    git remote add foo SCHEME_NAME::name-of-rclone-remote:path/to/repo.git
    git push foo

Pushes and pulls to a remote location won't work unless a git repository
already exists there.  The `--init` option to this tool can be used to 
conveniently create a minimal remote repository if none exists.
__LONGHELP_2__
    echo
    if [[ "${SCHEME_NAME}" == rclone-sync ]]
    then
        cat <<'__LONGHELP_3A__'
This tool keeps a full copy of the remote repository in your working copy's
`.git` directory, which is kept in sync with the remote.  You can also invoke
this tool as `git-remote-rclone-mount` (using repository URLs starting with
`rclone-mount::`) to access the remote via a FUSE mount instead, at a cost of
more intensive network access and reduced reliability/performance.
__LONGHELP_3A__
    elif [[ "${SCHEME_NAME}" == rclone-mount ]]
    then
        cat <<'__LONGHELP_3B__'
This tool uses `rclone mount` to access the remote repository via FUSE.
You can also invoke this tool as `git-remote-rclone-sync` (using repository
URLs starting with `rclone-sync::` to instead use a full local copy of the
remote repository which is kept in sync - this uses more local disk space but
is typically more performant and reliable.
__LONGHELP_3B__
    fi
    echo
    sed -e "s:SCHEME_NAME:${SCHEME_NAME}:g" <<'__LONGHELP_4__'
A custom rclone config file can be stored under your working copy's `.git`
directory, at `.git/SCHEME_NAME/rclone.conf` - this will supersede the
user/system rclone configuration if present.

CAUTION: Attempts by multiple users to concurrently modify the remote
repository may lead to corruption.  Only use this tool in cases where
concurrent modification by multiple users is unlikely.

Home page: <https://github.com/pobrelkey/git-remote-rclone-sync>
Reporting bugs: <https://github.com/pobrelkey/git-remote-rclone-sync/issues>
__LONGHELP_4__
}


# Run a command over (a copy of) the remote repository, syncing changes
# from the remote beforehand, and back to the remote afterwards if needed.
function with_repo() {
    REMOTE_COPY_DIR="${GIT_DIR}/${REMOTE_SCHEME}/remotes/${REMOTE_URI/://}"

    # If an rclone config file exists at .git/rclone-sync/rclone.conf,
    # use that in preference to the system rclone config file.
    if [[ -e "${GIT_DIR}/${REMOTE_SCHEME}/rclone.conf" ]]
    then
        export RCLONE_CONFIG="${GIT_DIR}/${REMOTE_SCHEME}/rclone.conf"
    fi

    # Source .git/rclone-sync/rclone.conf if it exists, to optionally set
    # environment variables used by rclone.
    if [[ -e "${GIT_DIR}/${REMOTE_SCHEME}/config.env" ]]
    then
        . "${GIT_DIR}/${REMOTE_SCHEME}/config.env"
    fi

    # If no rclone password helper is already specified, tell rclone to
    # invoke this script with --password-helper if it needs a password for
    # its config file.  (Rclone's built-in password prompt won't work.)
    export RCLONE_PASSWORD_COMMAND="${RCLONE_PASSWORD_COMMAND:-\"${0//\"/\"\"}\" --password-helper \"${RCLONE_CONFIG//\"/\"\"}\"}"

    READ_WRITE_MODE="${1}"
    shift
    VERB="${1}"
    shift

    mkdir -p "${REMOTE_COPY_DIR}" 1>&2
    if [[ "${REMOTE_SCHEME%mount}" != "${REMOTE_SCHEME}" ]]
    then
        function umount_rclone() {
            # Try to unmount the remote repo platform-agnostically:
            if [[ -x "$(which fusermount 2>/dev/null || true)" ]]
            then
                # if "fusermount" is on the path (Linux), use that
                fusermount -uz "${REMOTE_COPY_DIR}" 1>&2
            elif [[ "$(uname -o)" == Darwin ]]
            then
                # if we're on Mac OS, use "disktool"
                disktool unmount "${REMOTE_COPY_DIR}" 1>&2
            else
                # try "umount" - this is the correct way on *BSD
                umount "${REMOTE_COPY_DIR}" 1>&2
            fi
        }
        trap umount_rclone EXIT
        rclone mount "${REMOTE_URI}/" "${REMOTE_COPY_DIR}/" 1>&2 &

        # HACK: wait up to 10s until remote is actually mounted
        for i in $(seq 1 100)
        do
            if [[ -e "${REMOTE_COPY_DIR}/HEAD" ]] || [[ -e "${REMOTE_COPY_DIR}/.git/HEAD" ]]
            then
                break
            fi
            sleep 0.1
        done
    else
        find "${REMOTE_COPY_DIR}" -type f -not -writable | xargs -r chmod u+w
        rclone sync --create-empty-src-dirs "${REMOTE_URI}/" "${REMOTE_COPY_DIR}/" 1>&2
    fi

    "${VERB}" "${REMOTE_COPY_DIR}" "${@}"

    if [[ "${READ_WRITE_MODE}" == --rw ]] && [[ "${REMOTE_SCHEME%mount}" == "${REMOTE_SCHEME}" ]]
    then
        rclone sync --create-empty-src-dirs "${REMOTE_COPY_DIR}/" "${REMOTE_URI}/" 1>&2
    fi

    exit 0
}



set -e

if [[ $# == 0 ]]
then
    usage 1>&2
    exit 1
fi

REMOTE_SCHEME="$(basename "${0}")"
REMOTE_SCHEME="${REMOTE_SCHEME#git-remote-}"

# Was this script called with an --option?  If so, handle as appropriate...
case "${1}" in
    --password-helper)
        # If the script is invoked with --pasword-helper as the first arg,
        # rclone wants us to prompt the user for a password to its config.
        # Use the git credential helper mechanism to do this.
        RCLONE_CONFIG="${2:-$(rclone config file | sed -ne '/^\//{p;q}')}"
        while true
        do
            # Have git-credential prompt for a password to the rclone config
            # (or get the last-entered password from the credential cache);
            # parse the PASSWORD from the key line of the command's output.
            while read -r LINE
            do
                if [[ "${LINE}" != "${LINE#password=}" ]]
                then
                    PASSWORD="${LINE#password=}"
                fi
            done < <(
                    git credential fill < <(
                            echo protocol=rclone-config
                            echo host=
                            echo path="${RCLONE_CONFIG}"
                            echo username=
                            echo
                        )
                )

            # Test the password by feeding it to rclone, very carefully so as
            # not to expose it as a command line argument or an environment
            # variable (both of which are readable by other userids).
            PIPE_DIR="$(mktemp -d)"
            PIPE="$(mktemp -u -p "${PIPE_DIR}")"
            mkfifo -m 0600 "${PIPE}"
            cat >"${PIPE}" <<<"${PASSWORD}" &
            ECHOER=$!
            VERB=reject
            if rclone config touch \
                    --config "${RCLONE_CONFIG}" \
                    --password-command "cat \"${PIPE//\"/\"\"}\"" \
                    --log-file /dev/null >/dev/null 2>/dev/null
            then
                VERB=approve
            fi
            rm -rf "${PIPE_DIR}"
            disown $ECHOER
            kill $ECHOER >/dev/null 2>/dev/null || true

            # Report back to git-credential whether the password worked
            # (so it should be cache according to local policy) or not
            # (so it should be removed from the cache if it's cached).
            git credential ${VERB} < <(
                    echo protocol=rclone-config
                    echo host=
                    echo path="${RCLONE_CONFIG}"
                    echo username=
                    echo password="${PASSWORD}"
                    echo
                )

            # If the password worked, echo it to stdout so rclone can use it.
            # Else, repeat the while loop and prompt for a new password.
            if [[ $VERB == approve ]]
            then
                echo "${PASSWORD}"
                exit 0
            fi
        done
        ;;

    --init)
        # For convenience: initialize a repository on an rclone remote.
        # (Repositories stored on S3 and other backends with no concept of
        # empty dirs need at least one commit for git to recognize it as a
        # valid repo.  So, we add an initial commit of a Github-style
        # README.md file.)

        SCRIPT_TMPDIR="${TMPDIR:-/tmp}/git-create-rclone-remote-$$"
        cleanup() {
            if [ -d "${SCRIPT_TMPDIR}" ]
            then
                rm -rf "${SCRIPT_TMPDIR}"
            fi
        }
        trap cleanup EXIT

        shift
        REMOTE_URL="$1"
        REPO_NAME="$(basename "${1##*:}" .git)"
        shift

        if [[ -z "${REMOTE_URL}" ]]
        then
            echo 'ERROR: you must specify a remote URL' 1>&2
            exit 1
        fi

        mkdir -p "${SCRIPT_TMPDIR}"

        TMP_BARE_REPOS="${SCRIPT_TMPDIR}/repo"
        git init --bare "${TMP_BARE_REPOS}"
        (
            cd "${TMP_BARE_REPOS}"
            git config gc.autoDetach false
        )

        TMP_WORKING_DIR="${SCRIPT_TMPDIR}/work"
        git clone "${TMP_BARE_REPOS}" "${TMP_WORKING_DIR}" 2>/dev/null
        (
            echo
            echo "# ${REPO_NAME}"
            echo
            echo "$@"
            echo
        ) > "${TMP_WORKING_DIR}"/README.md

        (
            cd "${TMP_WORKING_DIR}"
            git add README.md
            git commit -m 'initial commit'
            git push
        )

        rclone sync --create-empty-src-dirs "${TMP_BARE_REPOS}/" "${REMOTE_URL%/}/"

        exit 0
        ;;


    --fsck|--gc|--repack)
        # we're in a Git working dir I hope...
        GIT_DIR="${GIT_DIR:-$(git rev-parse --absolute-git-dir)}"
        if [[ ! -d "${GIT_DIR}" ]]
        then
            echo "ERROR: not in a git working directory or GIT_DIR not defined" 1>&2
            exit 1
        fi

        CMD="${1#--}"
        shift

        # figure out which remote needs to be tweaked
        if [[ "$1" == --remote ]]
        then
            shift
            REMOTE_NAME="$1"
            shift
            REMOTE_URI="$(git remote get-uri ${REMOTE_NAME})"
        else
            REMOTE_COUNT=$(( "$(git remote -v | grep -E "\\t${REMOTE_SCHEME}::" | wc -l)" / 2 ))
            if [[ $REMOTE_COUNT != 1 ]]
            then
                echo "ERROR: working dir has more than one ${REMOTE_SCHEME} remote - use --remote flag to specify a specific one" 1>&2
                exit 1
            fi
            REMOTE_URI="$(git remote -v | grep -Eo "${REMOTE_SCHEME}::[^ ]+" | head -1)"
        fi

        function do_command() {
            export GIT_DIR=
            REPO_DIR="$1"
            shift
            git -C "${REPO_DIR}" "$@"
        }
        with_repo --rw do_command "${CMD}" "$@"
        ;;

    --help)
        usage
        echo
        options
        exit 0
        ;;

    --longhelp)
        longhelp
        exit 0
        ;;

    --version)
        SHA1="$(sed -Ene '/Id: *[0-9a-f]{8}/{s/^.*Id: *([0-9a-f]{8}).*$/\1/p;q};c (unknown version)' <<<'$Id$')"
        echo "$(basename "${0}") ${SHA1}"
        sed -Ene '/^#+ *Copyright/{s/^#+ *//p}' < "${0}"
        echo "License MIT: MIT License <https://spdx.org/licenses/MIT.html>"
        echo "This is free software: you are free to change and redistribute it."
        echo "There is NO WARRANTY, to the extent permitted by law."
        exit 0
        ;;

    --*)
        echo "ERROR: unrecognized option: ${1}" 1>&2
        usage 1>&2
        exit 1

esac



# No options specified, so we're being called internally by Git -
# so start a session in which we implement the Git remote protocol.

if [[ -z "${2}" ]]
then
    REMOTE_URI="${1}"
else
    REMOTE_URI="${2}"
fi

while true
do

    read LINE

    if [[ -z "${LINE}" ]]
    then
        exit 0
    fi

    CMD="${LINE%% *}"
    ARG="${LINE#* }"

    case "${CMD}" in

        capabilities)
            echo connect
            echo
            ;;

        connect)
            if [[ -z "${2}" ]]
            then
                REMOTE_URI="${1}"
            else
                REMOTE_URI="${2}"
            fi
            function do_command() {
                echo
                ARG="$1"
                shift
                CMD="$1"
                shift
                "${CMD}" "${ARG}" "$@"
            }
            if [[ "${ARG}" == git-upload-pack ]]
            then
                READ_WRITE_MODE=--ro
            else
                READ_WRITE_MODE=--rw
            fi
            with_repo $READ_WRITE_MODE do_command "${ARG}"
            ;;

        *)
            echo "error unrecognized command"
            exit 1
            ;;

    esac

done
